// üìÑ front/src/app/auth/authContext.tsx
import { createContext, useContext, useEffect, useState, useCallback } from "react"; // Ajouter useCallback
import { useNavigate } from "react-router-dom";

// Interface pour d√©crire la structure de l'objet utilisateur (bas√©e sur UserInDB du backend)
interface UserProfile {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  registration_date: string; // ou Date si vous la parsez
  subscription_type: string;
  // Ajoutez d'autres champs si n√©cessaire depuis UserInDB
}

// Interface pour le contexte
interface AuthContextType {
  user: UserProfile | null;
  token: string | null; // Gardons le token accessible aussi
  login: (token: string) => Promise<void>; // Rendre login asynchrone
  logout: () => void;
  loading: boolean; // Ajouter un √©tat de chargement
}

// Donner un type plus pr√©cis au contexte cr√©√©
const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: React.ReactNode }) { // Typer children
  const [user, setUser] = useState<UserProfile | null>(null);
  const [token, setToken] = useState<string | null>(localStorage.getItem("token")); // G√©rer le token s√©par√©ment
  const [loading, setLoading] = useState<boolean>(true); // Initialiser √† true
  const navigate = useNavigate();
  const apiUrl = import.meta.env.VITE_API_URL;
  const extensionId = import.meta.env.VITE_CHROME_EXTENSION_ID || "hpabpplocejflbbidmillajegdfjinhd";

  // Fonction pour envoyer le token √† l'extension Chrome
  const sendTokenToExtension = useCallback((jwt: string | null) => {
    if (!jwt) return;
    if (typeof chrome !== "undefined" && chrome.runtime) {
      console.log("üöÄ Tentative d'envoi du JWT √† l'extension...");
      chrome.runtime.sendMessage(
        extensionId,
        { action: "storeJwt", jwt: jwt },
        (response) => {
          console.log("R√©ponse re√ßue de l'extension :", response);
          if (chrome.runtime.lastError) {
            console.warn("‚ö†Ô∏è Impossible de contacter l'extension :", chrome.runtime.lastError.message);
          } else if (response?.status === "success") {
            console.log("‚úÖ JWT stock√© avec succ√®s dans l'extension !");
          }
        }
      );
    } else {
      console.log("‚ùå API Chrome non disponible, stockage local uniquement.");
    }
  }, [extensionId]);


  // Fonction pour r√©cup√©rer le profil utilisateur
  const fetchUserProfile = useCallback(async (currentToken: string): Promise<UserProfile | null> => {
    if (!currentToken) return null;
    try {
      const response = await fetch(`${apiUrl}/myprofile/`, {
        method: "GET",
        headers: {
          "Accept": "application/json",
          "Authorization": `Bearer ${currentToken}`,
        },
      });
      if (!response.ok) {
        // Si le token est invalide (401 Unauthorized par exemple), d√©connecter
        if (response.status === 401) {
            console.warn("Token invalide ou expir√© lors de la r√©cup√©ration du profil.");
            return null; // Indique que le profil n'a pas pu √™tre r√©cup√©r√©
        }
        throw new Error(`Erreur ${response.status} lors de la r√©cup√©ration du profil`);
      }
      const profileData: UserProfile = await response.json();
      return profileData;
    } catch (error) {
      console.error("Erreur fetchUserProfile:", error);
      return null; // Retourne null en cas d'erreur r√©seau ou autre
    }
  }, [apiUrl]); // D√©pendances de useCallback

  // Effet pour v√©rifier le token au montage et r√©cup√©rer le profil
  useEffect(() => {
    const checkAuth = async () => {
      setLoading(true);
      const storedToken = localStorage.getItem("token");
      if (storedToken) {
        const profile = await fetchUserProfile(storedToken);
        if (profile) {
          setUser(profile);
          setToken(storedToken); // Mettre √† jour l'√©tat du token
          sendTokenToExtension(storedToken); // Envoyer √† l'extension si valide
        } else {
          // Si le profil n'a pas pu √™tre r√©cup√©r√© (token invalide/expir√©)
          localStorage.removeItem("token");
          setUser(null);
          setToken(null);
        }
      } else {
          setUser(null);
          setToken(null);
      }
      setLoading(false);
    };
    checkAuth();
  }, [fetchUserProfile, sendTokenToExtension]); 


  // Fonction de connexion mise √† jour
  const login = useCallback(async (newToken: string) => {
    setLoading(true);
    localStorage.setItem("token", newToken);
    setToken(newToken); // Mettre √† jour l'√©tat du token

    const profile = await fetchUserProfile(newToken);

    if (profile) {
      setUser(profile); // Mettre √† jour l'√©tat user avec le profil complet
      sendTokenToExtension(newToken); // Envoyer √† l'extension apr√®s succ√®s
       navigate("/check-extension");
    } else {
      console.error("Impossible de r√©cup√©rer le profil apr√®s la connexion.");
      localStorage.removeItem("token"); // Nettoyer
      setUser(null);
      setToken(null);
    }
    setLoading(false);
  }, [fetchUserProfile, navigate, sendTokenToExtension]); // Ajouter sendTokenToExtension


  // Fonction de d√©connexion
  const logout = useCallback(() => {
    localStorage.removeItem("token");
    setUser(null);
    setToken(null); // Vider l'√©tat du token
    navigate("/auth"); // Rediriger vers la page de connexion
    setLoading(false); // Assurer que loading est false apr√®s logout
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [navigate]); // sendTokenToExtension retir√© si non utilis√© pour le logout


  // Fournir la valeur au contexte
  const contextValue = {
    user,
    token, // Fournir aussi le token
    login,
    logout,
    loading, // Fournir l'√©tat de chargement
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

// Hook personnalis√© pour utiliser le contexte
export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}